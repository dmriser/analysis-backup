# Compile model. 

import os, glob 

# Compline the Fortran Code
fort_env = Environment(ENV = {'PATH':os.environ['PATH']})
fort_env.Append(FLAGS = ['-fno-leading-underscore','-fno-second-underscore'])

fortranSources = glob.glob('inclusiveModels/Brasse/*.f')
fortranSources += glob.glob('inclusiveModels/Keppel/*.f')
fortranSources += glob.glob('inclusiveModels/Bosted/*.f')
fortranSources += glob.glob('elasticModels/Bosted/*.f')
fort_env.SharedLibrary('libFortranModel',fortranSources)

# Compile the C++ Code w/ the fortran 
# Libraries we just built. 
env = Environment(ENV = {'PATH':os.environ['PATH']})
env.ParseConfig("root-config --glibs --cflags")
env.Append(CCFLAGS = ['-g','-lgfortran'])
env.Append(CPPPATH = ['.'], LIBPATH = ['.'],LIBS = ['FortranModel'])

# Add c++ sources and create libCppModel 
libSources = glob.glob('inclusiveModels/*/*.cxx')
#libSources = glob.glob('inclusiveModels/Keppel/*.cxx')
libSources += glob.glob('elasticModels/*/*.cxx')

print(libSources)
env.SharedLibrary('libCppModel',libSources)


